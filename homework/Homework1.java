/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package homework;

import homework.debug.Evaluator;
import homework.naivebayes.NaiveBayesCrossFolding;
import homework.svm.SvmCrossFolding;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

/**
 *
 * @author luca
 */
public class Homework1 {//Homework considering malware detection
    
    private static List<List<String>> inputs=new LinkedList<>(); //List of provided datasets references to test
    public static List<String> Dictionary=new LinkedList<>(); //Set of Strings used to make comparison and categorize malwares
    private static int ntests=5; //Number of datasets that have to be tested from inputs
    private static int kerneltype=0;//used for SVM-classification 0=linear ; 1=polynomial ; 2=radial basis function 
    private static int type=-1; //Type of test that will be performed (-1=Random generation of datasets; 0=Evaluation of the samples(for features analyses);1=Naive-bayes-classifier , 2=SVM classifier);
    private static String[] files=new String[]{"test1.txt","test2.txt","test3.txt","test4.txt","test5.txt"};//List of dataset collection files that would be trained: first line=considered features, rest of files=samples
     
    private static int firstSetSize=1000;//final set has size=firstSetSize*5
    private static double MalwarePercentage=0.25;//Used in random dataset generation to fix a certain malware % in the samples    
    public static String drebindatasetlocation=System.getProperty("user.dir")+System.getProperty("file.separator")+"drebin";
    
    

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        MemDictionary();        
        if(type==-1){
            System.out.println("Random generation of datasets");
            generateRandomGrowingDatasets(MalwarePercentage);
            type=0;
        }
        for(int i=0;i<files.length && i<ntests;i++){
            inputs.add(LeggiDaFile(System.getProperty("user.dir")+System.getProperty("file.separator")+files[i]));
        }
        int currentTest=0;
        
        for (List<String> l : inputs) {
            switch (type) {
                case 0:
                    System.out.println();
                    System.out.println("Evaluation of dataset: "+files[currentTest]);
                    Evaluator ev=new Evaluator(l);
                    ev.evaluateSample();
                    ev.chooseBestIncomingFeatures(System.getProperty("user.dir")+System.getProperty("file.separator")+files[currentTest], 3);
                    break;
                case 1:
                    System.out.println();
                    System.out.println("Classification of dataset:"+files[currentTest]+" by Naive-Bayes-Classifier" );
                    NaiveBayesCrossFolding nbcf=new NaiveBayesCrossFolding(l,10,files[currentTest]);
                    nbcf.execute();
                    System.out.println("Classification of dataset:"+files[currentTest]+" by Naive-Bayes-Classifier completed");
                    break;
                case 2:
                    System.out.println();
                    System.out.println("Classification of dataset:"+files[currentTest]+" by SVM-Classifier" );
                    SvmCrossFolding svmcf=new SvmCrossFolding(l,10,files[currentTest],kerneltype);
                    svmcf.execute();
                    System.out.println("Classification of dataset:"+files[currentTest]+" by SVM-Classifier completed");
                    break;
                default:
                    break;
            }
            currentTest++;
        }
    }
    
    
    private static void MemDictionary(){//static method that memorize the dictionary file identifiers of malwares
        Dictionary.clear();
        List<String> l=LeggiDaFile(drebindatasetlocation+System.getProperty("file.separator")+"sha256_family.csv");
        boolean skip=true;
        for(String s:l){
            if(skip){//Don't load the first line
                skip=false;
            }else{
                Dictionary.add(s.split(",")[0]);
            }
        }
    }
    
    public static String getDatasetFilewithPath(String file){
        return drebindatasetlocation+System.getProperty("file.separator")+"feature_vectors"+System.getProperty("file.separator")+file;
    }
    
    public static List<String> LeggiDaFile(String file){// Static Method used to read all lines from a file and store them in a list avoiding exceptions
        List<String> in = new LinkedList<>();
    	
        if (file != null) {
            File f = new File(file);
            if (f.exists()) {
                BufferedReader x = null;
                try {
                    x = new BufferedReader(new FileReader(f));
                    String h = x.readLine();
                    while (h != null) {
                        if(!h.equals(""))
                            in.add(h);
                        h = x.readLine();
                    }
                } catch (IOException e) {
                } finally {
                    try {
                        x.close();
                    } catch (Exception es) {}
                }
            }
        }
        return in;
    }
    public static boolean StampaSuFile(List<String> a, String file){
        if(a!=null && file!=null){
            if(a.size()>0){
                File f=new File(file);
                if(!f.exists()){
                    f.getParentFile().mkdirs();
                }
                PrintWriter h =null;
                try {
                    h = new PrintWriter(new FileWriter(f));
                    for(int i=0;i<a.size();i++){
                        h.println(a.get(i));
                    }    
                } catch (IOException e) {
                    //e.printStackTrace();
                }finally{
                    try{
                        h.close();
                        return true;
                    }catch(Exception es){}
                }
            }else{
                File f=new File(file);
                if(!f.exists()){
                    f.getParentFile().mkdirs();
                }
                PrintWriter h =null;
                try {
                    h = new PrintWriter(new FileWriter(f));
                    h.println("");   
                } catch (IOException e) {
                    //e.printStackTrace();
                }finally{
                    try{
                        h.close();
                        return true;
                    }catch(Exception es){}
                }
            }
        }
        return false;
    }
    
    public static String getTimeLapsed(long tempotrascorso){
        int ore=0;
        int minuti=0;
        int secondi=0;
        
        if (tempotrascorso > 0) {
            if (tempotrascorso % 3600 != 0) {//Ci sono minuti
                ore = (int) ((tempotrascorso - tempotrascorso % 3600) / 3600);
                minuti = (int)(tempotrascorso % 3600);
                if(minuti%60!=0){
                    secondi=(int)(minuti%60);
                    minuti=(int)((minuti-secondi)/60);
                }else{
                    minuti=(int)(minuti/60);
                }
            } else {
                ore = (int) (tempotrascorso / 3600);
            }
        }
        
        if(secondi>=10){
            if(minuti>=10){
                if(ore>=10){
                    return ore+":"+minuti+":"+secondi;
                }else{
                    return "0"+ore+":"+minuti+":"+secondi;
                }
            }else{
                if(ore>10){
                    return ore+":"+"0"+minuti+":"+secondi;
                }else{
                    return "0"+ore+":"+"0"+minuti+":"+secondi;
                }
            }
        }else{
            if(minuti>=10){
                if(ore>=10){
                    return ore+":"+minuti+":"+"0"+secondi;
                }else{
                    return "0"+ore+":"+minuti+":"+"0"+secondi;
                }
            }else{
                if(ore>=10){
                    return ore+":"+"0"+minuti+":"+"0"+secondi;
                }else{
                    return "0"+ore+":"+"0"+minuti+":"+"0"+secondi;
                }
            }
        }
    }
    
    private static void generateRandomGrowingDatasets(double percMalw){
        List<List<String>> res=new LinkedList<>();
        File directory=new File(drebindatasetlocation+System.getProperty("file.separator")+"feature_vectors");
        List<String> samples=new LinkedList<>();
        String[] s=directory.list();
        for(int i=0;i<s.length;i++){
            samples.add(s[i]);
        }
        
        Random random = new Random();
        random.setSeed(System.nanoTime());//Randomized seed 
        List<String> buffer=new LinkedList<>();
        buffer.add("null");
        int malware=0;
        int i=1;
        while(res.size()!=files.length){          
            while(buffer.size()!=(firstSetSize*i)+1 && !samples.isEmpty()){
                String t=samples.get(random.nextInt(samples.size()));
                if(percMalw>0) {
                    double actual = (Double.parseDouble(malware +"") / Double.parseDouble(buffer.size() +"")); 
                    if (actual < percMalw) {
                        if (!Dictionary.contains(t)) {
                            List<String> Dictionary1=new LinkedList<>(Dictionary);
                            t=Dictionary.get(random.nextInt(Dictionary.size()));
                            while(buffer.contains(t)){
                                 String t1=Dictionary1.get(random.nextInt(Dictionary1.size()));
                                 if(samples.contains(t1)){
                                     t=t1;
                                 }
                                 Dictionary1.remove(t1);
                            }
                        }
                    } else if (actual > percMalw) {
                        if (Dictionary.contains(t)) {
                            t=samples.get(random.nextInt(samples.size()));
                            while(Dictionary.contains(t)){
                                t=samples.get(random.nextInt(samples.size()));
                            }
                        }
                    }
                } 
                if (!LeggiDaFile(Homework1.getDatasetFilewithPath(t)).isEmpty()) {
                    buffer.add(t);
                    samples.remove(t);
                    if (Dictionary.contains(t)) {
                        malware++;
                    }
                }
            }                 
            res.add(new LinkedList<>(buffer));
            i++;
        }
        for(i=0;i<files.length;i++){
            StampaSuFile(res.get(i),System.getProperty("user.dir")+System.getProperty("file.separator")+files[i]);
        }
    }
}
