package homework.debug;


import homework.Homework1;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author luca
 */
public class Evaluator { // class used for evaluating samples in a dataset
    
    private Set<String> dataset=new HashSet<>();
    private int malwares=0;
    private Map<String,Integer> features= new HashMap<>();
    
    public Evaluator(List<String> l){
        boolean skip=true;
        for(String s:l){
            if(skip)
                skip=false;
            else{
                dataset.add(s);
            }
        }
    }
    
    public void evaluateSample(){//Simple evaluation of the content of dataset files       
        for(String s:dataset){
            if (Homework1.Dictionary.contains(s)) {
                malwares++;
            }
            for(String l:Homework1.LeggiDaFile(Homework1.getDatasetFilewithPath(s))){ 
                String[] fields=l.split("::");
                if(features.containsKey(fields[0])){
                    features.put(fields[0], features.get(fields[0])+1);
                }else{
                    features.put(fields[0],+1);
                }
            }
        }       
        System.out.println("Malware="+malwares);
        System.out.println("Secure="+(dataset.size()-malwares));
        for(String s:features.keySet()){
            System.out.println(s+" occurrencies="+features.get(s)); 
        }
    }
    
    public void chooseBestIncomingFeatures(String file,int n){ //Used to remove possible duplicates in the dataset and choose in an automatic way the best n features
        List<String> output=new LinkedList<>();
        String feature="";
        TreeMap<String, Integer> ordered = new TreeMap<String, Integer>(new ValueComparator(features));
        ordered.putAll(features); 
        int x=0;
        for(String s: ordered.keySet()){
            if(x<n){
                if(x==n-1){
                    feature=feature+s;
                }else{
                    feature=feature+s+",";
                }
            }else{
                break;
            }
            x++;
        }
        output.add(feature);
        output.addAll(dataset);
        Homework1.StampaSuFile(output,file);
    }
   
    
}

class ValueComparator implements Comparator<String> {
    Map<String, Integer> base;

    public ValueComparator(Map<String, Integer> base) {
        this.base = base;
    }

    @Override
    public int compare(String a, String b) {
        if (base.get(a) >= base.get(b)) {
            return -1;
        } else {
            return 1;
        }
    }
}
