package homework.naivebayes;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class MultinomialClassifier {//Container class able to take trace and to categorize the information of all Document objects added

    public Document[] Doc;
    public int totalDoc;
    public int NoOfDistinctWords;
    public HashMap<String, HashMap<String, Integer>> words = new HashMap<>();
    public HashMap<String, Integer> category_Document = new HashMap<>(); //Per ogni categoria ritorna il numero di documenti di quel genere
    public HashMap<String, Integer> category_word = new HashMap<>(); //Contenie per categoria di documento il numero di occorrenze di parole

    public MultinomialClassifier() {
        this.Doc = null;
        NoOfDistinctWords = 0;
    }

    public String[] getAllCategory() { //Ritorna tutte le categorie di documenti
        String[] array = new String[category_Document.size()];
        int count = 0;

        Iterator allCagegorys = category_Document.entrySet().iterator();

        while (allCagegorys.hasNext()) {
            Map.Entry newEntery = (Map.Entry) allCagegorys.next();
            array[count++] = (String) newEntery.getKey();

        }
        return array;
    }

    public int getTotalNumberOfDocument() {
        if (Doc == null) {
            return 0;
        }
        return Doc.length;

    }

    public void Add(Document D) {

        if (category_Document.containsKey(D.getCategory())) {
            Integer tmp = category_Document.get(D.getCategory());
            tmp++;

            category_Document.put(D.getCategory(), tmp);

            tmp = category_word.get(D.getCategory());
            tmp = tmp + D.getTotalNoOfWords();

            category_word.put(D.getCategory(), tmp);

        } else {
            category_Document.put(D.getCategory(), 1);
            category_word.put(D.getCategory(), (Integer) D.getTotalNoOfWords());
        }

        if (Doc == null) {
            Doc = new Document[1];
            Doc[0] = D;
            someProcessing(D);

            return;
        }

        Document[] tmp = Doc;
        Doc = new Document[Doc.length + 1];
        System.arraycopy(tmp, 0, Doc, 0, tmp.length);
        Doc[Doc.length - 1] = D;

        NoOfDistinctWords = temp1();
        someProcessing(D);

    }

    public int getNoOfWords(String Category) {
        int count = 0;
        for (int i = 0; i < Doc.length; i++) {
            if (Doc[i].getCategory() == null ? Category == null : Doc[i].getCategory().equals(Category)) {
                count += Doc[i].getTotalNoOfWords();
            }
        }

        return count;
    }

    public int getDocCount() {
        return Doc.length;
    }

    public int getDocCount(String Category) {
        int count = 0;
        for (int i = 0; i < Doc.length; i++) {
            if (Doc[i].getCategory() == null ? Category == null : Doc[i].getCategory().equals(Category)) {
                count++;
            }
        }

        return count;
    }

    public int getNoOfWords(String Category, String word) {
        int count = 0;
        for (int i = 0; i < Doc.length; i++) {
            if (Doc[i].getCategory() == null ? Category == null : Doc[i].getCategory().equals(Category)) {
                for (int j = 0; j < Doc[i].getTotalNoOfWords(); j++) {
                    if (Doc[i].listOfWords[j].equalsIgnoreCase(word)) {
                        count++;
                    }
                }
            }
        }

        return count;
    }

    private int temp1() {
        Map<String, String> myHash = new HashMap<>();
        for (int i = 0; i < Doc.length; i++) {
            for (int j = 0; j < Doc[i].getTotalNoOfWords(); j++) {
                myHash.put(Doc[i].listOfWords[j], Doc[i].listOfWords[j]);
            }

        }

        return myHash.size();
    }

    private void someProcessing(Document D) {//DIstingue e associa word a category e occorrenze 
        String[] allWords = D.listOfWords;

        for (int i = 0; i < allWords.length; i++) {
            String word = allWords[i];
            if (this.words.containsKey(word)) {
                if (this.words.get(word).containsKey(D.getCategory())) {
                    Integer tmp = this.words.get(word).get(D.getCategory());
                    tmp++;
                    this.words.get(word).put(D.getCategory(), tmp);
                } else {
                    this.words.get(word).put(D.getCategory(), 1);
                }

            } else {
                HashMap<String, Integer> tmp = new HashMap<>();
                tmp.put(D.getCategory(), 1);
                this.words.put(word, tmp);
            }

        }
    }

}
